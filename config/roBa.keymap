#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        HIRAGANA {
            bindings = <&kp LANGUAGE_1>;
            key-positions = <32 31>;
            layers = <0>;
        };

        EIJI {
            bindings = <&kp LANG2>;
            key-positions = <23 24>;
            layers = <0>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Default {
            bindings = <
&kp Q       &kp L         &kp U       &kp COMMA  &kp PERIOD                                      &kp F            &kp W    &kp R    &kp Y  &kp P
&kp E       &kp I         &lt 4 A     &lt 2 O    &kp MINUS         &mo 7          &none          &kp K            &lt 1 T  &lt 3 N  &kp S  &kp H
&kp Z       &kp X         &kp C       &kp V      &kp LS(QUESTION)  &kp TAB        &none          &kp G            &kp D    &kp M    &kp J  &kp B
&kp ESCAPE  &kp LEFT_ALT  &kp DELETE  &kp LCTRL  &lt 6 SPACE       &kp ENTER      &kp BACKSPACE  &kp RIGHT_SHIFT                           &sl 6
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        Symbol_Left {
            bindings = <
&kp PIPE         &kp LESS_THAN  &kp GREATER_THAN  &kp LEFT_BRACE        &kp RIGHT_BRACE                                      &none       &none  &none  &none  &none
&kp EXCLAMATION  &kp GRAVE      &kp EQUAL         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none          &none          &none       &none  &none  &none  &none
&none            &kp SQT        &kp CARET         &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &none          &none          &none       &none  &none  &none  &none
&none            &none          &none             &kp LCTRL             &kp SPACE              &kp ENTER      &kp BACKSPACE  &kp RSHIFT                       &none
            >;
        };

        NUM {
            bindings = <
&none  &none  &none  &none      &none                                    &kp DOUBLE_QUOTES  &kp PERCENT    &kp AMPERSAND  &kp LS(BACKSLASH)  &kp DOLLAR
&none  &none  &none  &none      &none      &none          &none          &kp TILDE          &kp SLASH      &kp HASH       &kp ASTERISK       &kp AT_SIGN
&none  &none  &none  &none      &none      &none          &none          &kp UNDERSCORE     &kp SEMICOLON  &kp COLON      &kp PLUS           &none
&none  &none  &none  &kp LCTRL  &kp SPACE  &kp ENTER      &kp BACKSPACE  &kp RIGHT_SHIFT                                                     &none
            >;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2     &kp F3     &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7     &kp F8     &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &mkp LCLK  &mkp RCLK  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                                &kp F12
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
